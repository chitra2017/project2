package com.controller;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.dao.*;
import com.dao.user.UserDAOService;
import com.model.Friend;
import com.model.User;


@Controller
public class UserController {
	
	//private static final Logger log=LoggerFactory.getLogger(BlogController.class);
	
	@Autowired
	private UserDAOService us;
	
String name;

	
	
	
	@RequestMapping("/Register")  
    public String showform(Map<String, Object> model){  
       
		 User user = new User();
	        model.put("newUser", user);
	       
		return "Register";
      
    }  
	@RequestMapping("/edituser")  
    public String editform(Map<String, Object> model, HttpServletRequest request){  

		 name = SecurityContextHolder.getContext().getAuthentication().getName();
		 User user = us.getUserById(name);
	        model.put("newUser", user);
	            
		return "UpdateUser";
      
    }  
    
	

    @RequestMapping(value="/createUser",method = RequestMethod.POST)  
	public String createUser( @Valid @ModelAttribute("newUser") User newUser ,BindingResult result, Map<String, Object> model, HttpServletRequest request)
	{  
		if (result.hasErrors()) {
			
			List<FieldError> errors = result.getFieldErrors();
		    for (FieldError error : errors ) {
		        System.out.println (error.getObjectName() + " - " + error.getDefaultMessage());
		    }
			//model.addAttribute("newUser",newUser);
    		return "Register";
    	
    	
    	}    	
    	else
    	{System.out.println("heloo");
    		boolean v=us.userValidate(newUser.getUserID());
    		if(v)
    		{		boolean valid=us.createUser(newUser);System.out.println("new user ");
    		if(valid){
    			 
    		    ServletContext context=request.getSession().getServletContext();
    		    String path=context.getRealPath("./resources/images/"+newUser.getUserID()+".jpg");
    		    System.out.println("Path = "+path); 
    		    System.out.println("File name = "+newUser.getImage().getOriginalFilename());
    		    
    		    /*	String filename=null;
    		    	String path="C:\\dhet\\"+prod.getPid()+".jpg"; */
    		    	int res = 0;
    		    	File f=new File(path);
    		    	if(!newUser.getImage().isEmpty()) {
    		       	try { //filename=p.getImage().getOriginalFilename();
    		    		byte[] bytes=newUser.getImage().getBytes(); 
    		    		BufferedOutputStream bs=new BufferedOutputStream(new FileOutputStream(f));
    		    		bs.write(bytes); bs.close(); 
    		    		System.out.println("Image uploaded");
    		    		
    		    	   	
    		       		}catch(Exception ex)
    		       		{
    		       			System.out.println(ex.getMessage());
    		       		}
    		    		}
    		    		else
    		    		{
    		    			res=0;
    		    		}
    		    	
    		   
    			return "login";
    		}
    		else{
    		
    			return "Register";
    		}}else
    		{	result.rejectValue("userID", "error.newUser", "An account already exists for this login name.");

    			return "Register";
    		}
        	}
    	
		}
	
    @RequestMapping(value="/updateUser",method = RequestMethod.POST)  
	public String updateUser( @Valid @ModelAttribute("newUser") User newUser ,BindingResult result, Map<String, Object> model, HttpServletRequest request)
	{  
		if (result.hasErrors()) {
			
			List<FieldError> errors = result.getFieldErrors();
		    for (FieldError error : errors ) {
		        System.out.println (error.getObjectName() + " - " + error.getDefaultMessage());
		    }
			//model.addAttribute("newUser",newUser);
    		return "Register";
    	
    	
    	}    	
    	else
    	{System.out.println("heloo");
    		boolean valid=us.updateUser(newUser);
    		if(valid){
    			 
    		    ServletContext context=request.getSession().getServletContext();
    		    String path=context.getRealPath("./resources/images/"+newUser.getUserID()+".jpg");
    		    System.out.println("Path = "+path); 
    		    System.out.println("File name = "+newUser.getImage().getOriginalFilename());
    		    
    		    /*	String filename=null;
    		    	String path="C:\\dhet\\"+prod.getPid()+".jpg"; */
    		    	int res = 0;
    		    	File f=new File(path);
    		    	if(!newUser.getImage().isEmpty()) {
    		       	try { //filename=p.getImage().getOriginalFilename();
    		    		byte[] bytes=newUser.getImage().getBytes(); 
    		    		BufferedOutputStream bs=new BufferedOutputStream(new FileOutputStream(f));
    		    		bs.write(bytes); bs.close(); 
    		    		System.out.println("Image uploaded");
    		    		
    		    	   	
    		       		}catch(Exception ex)
    		       		{
    		       			System.out.println(ex.getMessage());
    		       		}
    		    		}
    		    		else
    		    		{
    		    			res=0;
    		    		}
    		    	
    		   
    			return "login";
    		}
    		else{
    		
    			return "UpdateUser";
    		}
    		}
    	
		}
	
	
	@RequestMapping("/invitechat")
	public String showchat(HttpServletRequest request,@RequestParam  String uid,@RequestParam String fid){
	
		return "ChatPage";
	}
	
	@RequestMapping("/getFriendsOfUser")
	
	public   String  getFriendsofUser (HttpServletRequest request){
		
		 name = SecurityContextHolder.getContext().getAuthentication().getName();
System.out.println(name);
		List<Friend> Frilist= us.getFriendsOfUser(name);
		request.getSession().setAttribute("Frilist", Frilist);
		return "UserViewFriends";
	}
	
	
	
	@GetMapping("/getFriendsReqOfUser")
	public String getFriendsReqOfUser(HttpServletRequest request){
		 name = SecurityContextHolder.getContext().getAuthentication().getName();
	       List <Friend> Frilist= us.getFriendsReqOfUser(name);
		   request.getSession().setAttribute("Frilist", Frilist);
       	   return "ReqFriends";
	
	}
	
	
	@GetMapping("/getAllUsers")
	public String getAllUSer(HttpServletRequest request){
		 name = SecurityContextHolder.getContext().getAuthentication().getName();
		 System.out.println(name);
		List <User> ulist=us.getAllUsers(name);
		System.out.println(ulist.size()+" ");
		request.getSession().setAttribute("ulist", ulist);
		return "AllUser";
	}
	
	@RequestMapping("/sendFriendRequest")
	public String sendFriendRequest(HttpServletRequest request,@RequestParam  String uid,@RequestParam String fid){
		boolean valid=us.sendFriendRequest(uid, fid);
		System.out.println(valid);
		if(valid){
			List<Friend> lf=us.getFriendsOfUser(uid);
			System.out.println(lf.size()+" ");
			
			request.getSession().setAttribute("Frilist", lf);
			return "Home";
		}
		else
			return "Home";
		
	}
	
	@RequestMapping("/acceptFriendRequest")
	public String acceptRequest(HttpServletRequest request,@RequestParam  String uid,@RequestParam String fid){
		boolean valid=us.acceptFriendRequest(uid, fid);
		System.out.println(valid);
		if(valid){
			List<Friend> lf=us.getAllFriendsOfUser(uid);
			System.out.println(lf.size()+" ");
			
			request.getSession().setAttribute("Frilist", lf);
			return "Home";
		}
		else
			return "Home";
		
	}
	
	@RequestMapping("/rejectRequest")
	public String rejectRequest(HttpServletRequest request,@RequestParam  String uid,@RequestParam String fid){
		boolean valid=us.rejectRequest(uid, fid);
		if(valid){
			List<Friend> lf=us.getAllFriendsOfUser(uid);
			System.out.println(lf.size()+" ");
			
			request.getSession().setAttribute("Frilist", lf);
			return "UserViewFriends";
		}
		else
			return "UserViewFriends";
	}
}
