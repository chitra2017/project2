package com.controller;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.dao.*;
import com.dao.user.UserDAOService;
import com.model.Friend;
import com.model.User;


@Controller
public class UserController {
	
	//private static final Logger log=LoggerFactory.getLogger(BlogController.class);
	
	@Autowired
	private UserDAOService us;
	
String name;

	
	
	
	@RequestMapping("/Register")  
    public String showform(ModelMap model){  
       
		model.addAttribute("newUser",new User());
		return "Register";
      
    }  
 
    
	

    @RequestMapping(value="/createUser",method = RequestMethod.POST)  
	public String createUser( @Valid User newUser, ModelMap model,BindingResult result)
	{  
		if (result.hasErrors()) {
			model.addAttribute("newUser",newUser);
    		return "Register";
    	
    	
    	}
    	
    	else
    	{
		return "login";
		}
	}
	
	/*@PostMapping("/updateUser")
	public ResponseEntity<User> updateUser(@RequestBody User newUser)
	{
		boolean valid=us.updateUser(newUser);
		if(valid){
			return new ResponseEntity<User>(newUser,HttpStatus.OK);
		}
		else{
			return null;
		}
	}
	
	@GetMapping("/getUserById/{userID}")
	public ResponseEntity<User> getUSerByID(@PathVariable("userID") String userID){
		return new ResponseEntity<User>(us.getUserById(userID),HttpStatus.OK);
	}*/
/*	
	@GetMapping("/getFriendsOfUser")
	public String getAllFriends(HttpServletRequest request,@RequestParam  String uid){
		List<Friend> lf=us.getFriendsOfUser(uid);
		System.out.println(lf.size()+" ");
		
		request.getSession().setAttribute("Frilist", lf);
		return "UserViewFriends";

	}
*/
	
	@RequestMapping("/invitechat")
	public String showchat(HttpServletRequest request,@RequestParam  String uid,@RequestParam String fid){
	
		return "ChatPage";
	}
	
	@RequestMapping("/getFriendsOfUser")
	
	public   String  getFriendsofUser (HttpServletRequest request){
		
	       name =(String) request.getSession().getAttribute("username");
System.out.println(name);
		List<Friend> Frilist= us.getFriendsOfUser(name);
		request.getSession().setAttribute("Frilist", Frilist);
		return "UserViewFriends";
	}
	
	
	
	/*
	@GetMapping("/getFriendsOfUser/{userID}")
	public ResponseEntity<List<Friend>> getFriendsOfUser(@PathVariable("userID") String userID){
		return new ResponseEntity<List<Friend>>(us.getFriendsOfUser(userID),HttpStatus.OK);
	}
	*/
	@GetMapping("/getFriendsReqOfUser")
	public String getFriendsReqOfUser(HttpServletRequest request){
		   name =(String) request.getSession().getAttribute("username");
	       List <Friend> Frilist= us.getFriendsReqOfUser(name);
		   request.getSession().setAttribute("Frilist", Frilist);
       	   return "ReqFriends";
	
	}
	
	/*
	@PostMapping("/validateUser")
	public  ResponseEntity<User> validateUser(@RequestBody User validateUser){
		if(us.userValidate(validateUser.getUserID(), validateUser.getUserPassword())){
			return new ResponseEntity<User>(us.getUserById(validateUser.getUserID()),HttpStatus.OK);
		}
		else{
			return null;
		}
	}*/
	
	@GetMapping("/getAllUsers")
	public String getAllUSer(HttpServletRequest request){
		 name =(String) request.getSession().getAttribute("username");
		 System.out.println(name);
		List <User> ulist=us.getAllUsers(name);
		System.out.println(ulist.size()+" ");
		request.getSession().setAttribute("ulist", ulist);
		return "AllUser";
	}
	/*
	@GetMapping("/userLogout/{userID}")
	public void userLogout(@PathVariable("userID") String userID){
		us.setUserOffline(userID);
	}
*/
	@RequestMapping("/sendFriendRequest")
	public String sendFriendRequest(HttpServletRequest request,@RequestParam  String uid,@RequestParam String fid){
		boolean valid=us.sendFriendRequest(uid, fid);
		System.out.println(valid);
		if(valid){
			List<Friend> lf=us.getFriendsOfUser(uid);
			System.out.println(lf.size()+" ");
			
			request.getSession().setAttribute("Frilist", lf);
			return "Home";
		}
		else
			return "Home";
		
	}
	
	@RequestMapping("/acceptFriendRequest")
	public String acceptRequest(HttpServletRequest request,@RequestParam  String uid,@RequestParam String fid){
		boolean valid=us.acceptFriendRequest(uid, fid);
		System.out.println(valid);
		if(valid){
			List<Friend> lf=us.getAllFriendsOfUser(uid);
			System.out.println(lf.size()+" ");
			
			request.getSession().setAttribute("Frilist", lf);
			return "Home";
		}
		else
			return "Home";
		
	}
	
	@RequestMapping("/rejectRequest")
	public String rejectRequest(HttpServletRequest request,@RequestParam  String uid,@RequestParam String fid){
		boolean valid=us.rejectRequest(uid, fid);
		if(valid){
			List<Friend> lf=us.getAllFriendsOfUser(uid);
			System.out.println(lf.size()+" ");
			
			request.getSession().setAttribute("Frilist", lf);
			return "UserViewFriends";
		}
		else
			return "UserViewFriends";
	}
}
